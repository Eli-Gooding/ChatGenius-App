# Project File Structure for Chat Genius

## Overview
The directory structure of Chat Genius is designed to enhance maintainability, scalability, and clarity. The chosen structure follows modern best practices for Next.js projects, while integrating Supabase for authentication and data management.

---

## Directory Structure
```
chat-genius/
├── public/
│   └── assets/                # Static assets like images and icons
├── src/
│   ├── components/            # Reusable React components
│   │   ├── layout/            # Layout components (e.g., Navbar, Footer)
│   │   ├── forms/             # Form components (e.g., LoginForm, SignUpForm)
│   │   ├── messages/          # Message-related components (e.g., MessageFeed, MessageInput)
│   │   └── modals/            # Modal components
│   ├── pages/                 # Next.js page routes
│   │   ├── api/               # API routes
│   │   │   ├── auth/          # Supabase authentication endpoints
│   │   │   ├── channels/      # Endpoints for channel-related operations
│   │   │   └── messages/      # Endpoints for message-related operations
│   │   ├── index.tsx          # Landing page
│   │   ├── dashboard.tsx      # Dashboard after login
│   │   └── channels/          # Channel-specific pages
│   ├── context/               # React context for global state management
│   ├── hooks/                 # Custom React hooks (e.g., useAuth, useMessages)
│   ├── lib/                   # Utility functions and configurations
│   │   ├── supabase.ts        # Supabase client configuration
│   │   └── constants.ts       # Shared constants
│   ├── styles/                # Global and component-specific styles
│   │   └── globals.css        # Tailwind CSS entry point
│   └── types/                 # TypeScript interfaces and types
├── .env.local                 # Environment variables for local development
├── .eslintrc.js               # ESLint configuration
├── .prettierrc                # Prettier configuration
├── next.config.js             # Next.js configuration
├── package.json               # Project dependencies and scripts
└── tsconfig.json              # TypeScript configuration
```

---

## Rationale for Structure

### **Modularity**
- By grouping reusable components into the `components/` directory and separating them by functionality (e.g., `layout/`, `forms/`), the project encourages modular and maintainable code.

### **Clear API Organization**
- API routes are organized by feature under `pages/api/`, making it easy to locate and extend backend functionality. The use of Supabase simplifies serverless API interactions.

### **Separation of Concerns**
- `hooks/`, `lib/`, and `context/` segregate custom hooks, utilities, and global state management, reducing clutter in component files.

### **Scalability**
- The directory structure supports feature expansion, such as adding new modules (e.g., `notifications/`) without disrupting existing organization.

### **Styling Consistency**
- Tailwind CSS is configured in `styles/`, ensuring a consistent design language throughout the app.

### **Supabase Integration**
- A dedicated `supabase.ts` file in `lib/` centralizes the Supabase client configuration, simplifying authentication and database interactions.

---

## Key Directories Explained

### `components/`
Contains reusable UI components to minimize duplication and improve consistency. Subfolders categorize components based on their functionality.

### `pages/`
Holds all page-level components as per Next.js conventions. Subfolders under `pages/api/` implement backend logic for features such as authentication and messaging.

### `context/`
Manages global application state using React Context, e.g., user authentication state or real-time updates.

### `hooks/`
Stores custom React hooks, promoting reusable logic for tasks like fetching messages or handling authentication.

### `lib/`
Houses utility functions and external service configurations, such as Supabase integration.

### `styles/`
Includes global styles and Tailwind CSS configuration, ensuring a unified look and feel across the app.

---

## Environment Variables
### `.env.local`
Stores sensitive information such as Supabase API keys and URLs:
```
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

---

This structure ensures Chat Genius remains scalable, maintainable, and developer-friendly while leveraging Supabase for authentication and backend functionality.
