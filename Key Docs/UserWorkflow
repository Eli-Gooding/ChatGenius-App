# User Journey and Data Flow for Chat Genius

## Overview
This document maps the user journey through Chat Genius, detailing each interaction and the corresponding data flow from user registration to feature usage.

---

## 1. User Registration and Login

### User Journey
1. **Registration**: A new user visits the app and clicks on the "Sign Up" button. They provide their email, password, and optionally, their name.
2. **Email Verification**: The user receives an email verification link and clicks it to activate their account.
3. **Login**: The user logs in using their credentials or via SSO (if enabled).
4. **Session Initialization**: Upon successful login, the user is redirected to the dashboard.

### Data Flow
- **Frontend**: Sends user-provided data to Supabase Auth's registration API.
- **Supabase Auth Backend**: Validates the registration, sends a verification email, and stores user credentials securely.
- **Frontend**: Retrieves a session token after login, stored in cookies or local storage for authenticated API requests.

---

## 2. Dashboard Access

### User Journey
1. After login, the user is presented with a dashboard listing their joined channels and direct message threads.
2. The user can view available channels and create new ones if they have admin privileges.

### Data Flow
- **Frontend**: Sends a `GET /api/channels` request to retrieve channels associated with the user.
- **Backend**: Queries the `Membership` and `Channel` tables in Supabase to fetch channels.
- **Frontend**: Displays the retrieved data in a user-friendly UI.

---

## 3. Channel Interaction

### User Journey
1. The user selects a channel from the dashboard.
2. The channel page loads, displaying the message feed, file attachments, and member list.
3. The user can send a message, react to a message, or upload a file.

### Data Flow
- **Frontend**: Sends a `GET /api/channels/:id/messages` request to retrieve messages.
- **Backend**: Queries the `Message` table in Supabase and streams real-time updates via WebSockets.
- **Frontend**: Sends a `POST /api/channels/:id/messages` request to add a new message.
- **Backend**: Adds the message to the `Message` table and broadcasts the update via WebSockets.

---

## 4. Message Reactions

### User Journey
1. The user hovers over a message and clicks an emoji to react.
2. The reaction count updates in real time, and other users see the reaction instantly.

### Data Flow
- **Frontend**: Sends a `POST /api/messages/:id/reactions` request with the emoji and user ID.
- **Backend**: Updates the `Reaction` table and broadcasts the change via WebSockets.
- **Frontend**: Listens for WebSocket updates to display the reaction in the UI.

---

## 5. File Sharing

### User Journey
1. The user clicks the file upload button and selects a file.
2. The file is uploaded and appears in the message feed, with a link or preview.

### Data Flow
- **Frontend**: Sends the file to Supabase's storage bucket via the `POST /api/files` endpoint.
- **Backend**: Uploads the file to AWS S3 (via Supabase) and stores metadata in the `File` table.
- **Frontend**: Updates the message feed to display the file link or preview.

---

## 6. User Presence and Status

### User Journey
1. The user’s online status updates automatically when they log in.
2. They can manually set their status (e.g., "Away").
3. Other users see status updates in real time.

### Data Flow
- **Frontend**: Sends a `PATCH /api/users/:id/status` request to update the user’s status.
- **Backend**: Updates the `User` table and broadcasts the change via WebSockets.
- **Frontend**: Listens for WebSocket updates to reflect the status in the UI.

---

## 7. Search and Navigation

### User Journey
1. The user enters a keyword in the search bar to find messages or files.
2. The results display relevant messages and files from the current channel or across channels.

### Data Flow
- **Frontend**: Sends a `GET /api/search` request with the search term and filters (e.g., channel ID).
- **Backend**: Queries the `Message` and `File` tables in Supabase to retrieve matches.
- **Frontend**: Displays the search results in a paginated and filterable list.

---

## 8. Admin Actions

### User Journey
1. Admins create or delete channels and manage memberships.
2. They can assign roles (e.g., admin or member) to users.

### Data Flow
- **Frontend**: Sends a `POST /api/channels` request to create a new channel.
- **Backend**: Adds the new channel to the `Channel` table and assigns the admin as a member in the `Membership` table.
- **Frontend**: Sends a `POST /api/channels/:id/memberships` request to add a member.
- **Backend**: Updates the `Membership` table with the new member details.

---

This document outlines the complete user journey and associated data flow, ensuring clarity in how features are implemented and interact with each other.
